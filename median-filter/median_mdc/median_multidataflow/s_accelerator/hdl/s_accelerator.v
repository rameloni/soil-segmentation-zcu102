// ----------------------------------------------------------------------------
//
// This file has been automatically generated by:
// Multi-Dataflow Composer tool - Platform Composer
// Template Interface Layer module - Memory-Mapped type
// on 2022/03/30 16:12:02
// More info available at http://sites.unica.it/rpct/
//
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// Module Interface
// ----------------------------------------------------------------------------
module s_accelerator#
(
	// Parameters of Axi Slave Bus Interface S00_AXIS
	parameter integer C_S00_AXIS_TDATA_WIDTH	= 32,
// Parameters of Axi Slave Bus Interface S01_AXIS
	parameter integer C_S01_AXIS_TDATA_WIDTH	= 32,
// Parameters of Axi Slave Bus Interface S02_AXIS
	parameter integer C_S02_AXIS_TDATA_WIDTH	= 32,
// Parameters of Axi Slave Bus Interface S03_AXIS
	parameter integer C_S03_AXIS_TDATA_WIDTH	= 32,
// Parameters of Axi Slave Bus Interface S04_AXIS
	parameter integer C_S04_AXIS_TDATA_WIDTH	= 32,

	// Parameters of Axi Master Bus Interface M00_AXIS
	parameter integer C_M00_AXIS_TDATA_WIDTH	= 32,
	parameter integer C_M00_AXIS_START_COUNT	= 32,
// Parameters of Axi Master Bus Interface M01_AXIS
	parameter integer C_M01_AXIS_TDATA_WIDTH	= 32,
	parameter integer C_M01_AXIS_START_COUNT	= 32,
// Parameters of Axi Master Bus Interface M02_AXIS
	parameter integer C_M02_AXIS_TDATA_WIDTH	= 32,
	parameter integer C_M02_AXIS_START_COUNT	= 32,
// Parameters of Axi Master Bus Interface M03_AXIS
	parameter integer C_M03_AXIS_TDATA_WIDTH	= 32,
	parameter integer C_M03_AXIS_START_COUNT	= 32,
// Parameters of Axi Master Bus Interface M04_AXIS
	parameter integer C_M04_AXIS_TDATA_WIDTH	= 32,
	parameter integer C_M04_AXIS_START_COUNT	= 32,
	
	// Parameters of Axi Slave Bus Interface S00_AXI
	parameter integer C_S00_AXI_DATA_WIDTH	= 32,
	parameter integer C_S00_AXI_ADDR_WIDTH	= 5
)
(
	// Ports of Axi Slave Bus Interface S00_AXIS
	input wire  s00_axis_aclk,
	input wire  s00_axis_aresetn,
	output wire  s00_axis_tready,
	input wire [C_S00_AXIS_TDATA_WIDTH-1 : 0] s00_axis_tdata,
	input wire [(C_S00_AXIS_TDATA_WIDTH/8)-1 : 0] s00_axis_tstrb,
	input wire  s00_axis_tlast,
	input wire  s00_axis_tvalid,
	input wire [31 : 0] s00_axis_data_count,
// Ports of Axi Slave Bus Interface S01_AXIS
	input wire  s01_axis_aclk,
	input wire  s01_axis_aresetn,
	output wire  s01_axis_tready,
	input wire [C_S01_AXIS_TDATA_WIDTH-1 : 0] s01_axis_tdata,
	input wire [(C_S01_AXIS_TDATA_WIDTH/8)-1 : 0] s01_axis_tstrb,
	input wire  s01_axis_tlast,
	input wire  s01_axis_tvalid,
	input wire [31 : 0] s01_axis_data_count,
// Ports of Axi Slave Bus Interface S02_AXIS
	input wire  s02_axis_aclk,
	input wire  s02_axis_aresetn,
	output wire  s02_axis_tready,
	input wire [C_S02_AXIS_TDATA_WIDTH-1 : 0] s02_axis_tdata,
	input wire [(C_S02_AXIS_TDATA_WIDTH/8)-1 : 0] s02_axis_tstrb,
	input wire  s02_axis_tlast,
	input wire  s02_axis_tvalid,
	input wire [31 : 0] s02_axis_data_count,
// Ports of Axi Slave Bus Interface S03_AXIS
	input wire  s03_axis_aclk,
	input wire  s03_axis_aresetn,
	output wire  s03_axis_tready,
	input wire [C_S03_AXIS_TDATA_WIDTH-1 : 0] s03_axis_tdata,
	input wire [(C_S03_AXIS_TDATA_WIDTH/8)-1 : 0] s03_axis_tstrb,
	input wire  s03_axis_tlast,
	input wire  s03_axis_tvalid,
	input wire [31 : 0] s03_axis_data_count,
// Ports of Axi Slave Bus Interface S04_AXIS
	input wire  s04_axis_aclk,
	input wire  s04_axis_aresetn,
	output wire  s04_axis_tready,
	input wire [C_S04_AXIS_TDATA_WIDTH-1 : 0] s04_axis_tdata,
	input wire [(C_S04_AXIS_TDATA_WIDTH/8)-1 : 0] s04_axis_tstrb,
	input wire  s04_axis_tlast,
	input wire  s04_axis_tvalid,
	input wire [31 : 0] s04_axis_data_count,
	// Ports of Axi Master Bus Interface M00_AXIS
	input wire  m00_axis_aclk,
	input wire  m00_axis_aresetn,
	output wire  m00_axis_tvalid,
	output wire [C_M00_AXIS_TDATA_WIDTH-1 : 0] m00_axis_tdata,
	output wire [(C_M00_AXIS_TDATA_WIDTH/8)-1 : 0] m00_axis_tstrb,
	output wire  m00_axis_tlast,
	input wire  m00_axis_tready,
// Ports of Axi Master Bus Interface M01_AXIS
	input wire  m01_axis_aclk,
	input wire  m01_axis_aresetn,
	output wire  m01_axis_tvalid,
	output wire [C_M01_AXIS_TDATA_WIDTH-1 : 0] m01_axis_tdata,
	output wire [(C_M01_AXIS_TDATA_WIDTH/8)-1 : 0] m01_axis_tstrb,
	output wire  m01_axis_tlast,
	input wire  m01_axis_tready,
// Ports of Axi Master Bus Interface M02_AXIS
	input wire  m02_axis_aclk,
	input wire  m02_axis_aresetn,
	output wire  m02_axis_tvalid,
	output wire [C_M02_AXIS_TDATA_WIDTH-1 : 0] m02_axis_tdata,
	output wire [(C_M02_AXIS_TDATA_WIDTH/8)-1 : 0] m02_axis_tstrb,
	output wire  m02_axis_tlast,
	input wire  m02_axis_tready,
// Ports of Axi Master Bus Interface M03_AXIS
	input wire  m03_axis_aclk,
	input wire  m03_axis_aresetn,
	output wire  m03_axis_tvalid,
	output wire [C_M03_AXIS_TDATA_WIDTH-1 : 0] m03_axis_tdata,
	output wire [(C_M03_AXIS_TDATA_WIDTH/8)-1 : 0] m03_axis_tstrb,
	output wire  m03_axis_tlast,
	input wire  m03_axis_tready,
// Ports of Axi Master Bus Interface M04_AXIS
	input wire  m04_axis_aclk,
	input wire  m04_axis_aresetn,
	output wire  m04_axis_tvalid,
	output wire [C_M04_AXIS_TDATA_WIDTH-1 : 0] m04_axis_tdata,
	output wire [(C_M04_AXIS_TDATA_WIDTH/8)-1 : 0] m04_axis_tstrb,
	output wire  m04_axis_tlast,
	input wire  m04_axis_tready,
	
	// Monitoring
	
	// Ports of Axi Slave Bus Interface S00_AXI
	input wire  s00_axi_aclk,
	input wire  s00_axi_aresetn,
	input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_awaddr,
	input wire [2 : 0] s00_axi_awprot,
	input wire  s00_axi_awvalid,
	output wire  s00_axi_awready,
	input wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_wdata,
	input wire [(C_S00_AXI_DATA_WIDTH/8)-1 : 0] s00_axi_wstrb,
	input wire  s00_axi_wvalid,
	output wire  s00_axi_wready,
	output wire [1 : 0] s00_axi_bresp,
	output wire  s00_axi_bvalid,
	input wire  s00_axi_bready,
	input wire [C_S00_AXI_ADDR_WIDTH-1 : 0] s00_axi_araddr,
	input wire [2 : 0] s00_axi_arprot,
	input wire  s00_axi_arvalid,
	output wire  s00_axi_arready,
	output wire [C_S00_AXI_DATA_WIDTH-1 : 0] s00_axi_rdata,
	output wire [1 : 0] s00_axi_rresp,
	output wire  s00_axi_rvalid,
	input wire  s00_axi_rready
);


// ----------------------------------------------------------------------------
// Module Signals
// ----------------------------------------------------------------------------
// Parameters
// output counter 6 (out_px) for tlast
parameter SIZE_COUNT_6 = 8;
// output counter 7 (out_pivot) for tlast
parameter SIZE_COUNT_7 = 8;
// output counter 8 (out_buff_size) for tlast
parameter SIZE_COUNT_8 = 8;
// output counter 9 (out_median_pos) for tlast
parameter SIZE_COUNT_9 = 8;
// output counter 10 (out_second_median_value) for tlast
parameter SIZE_COUNT_10 = 8;

// Wire(s) and Reg(s)
wire [31 : 0] slv_reg0;
wire [7 : 0] in_px_data;
wire in_px_push;
wire in_px_full;
wire [7 : 0] in_pivot_data;
wire in_pivot_push;
wire in_pivot_full;
wire [10 : 0] in_buff_size_data;
wire in_buff_size_push;
wire in_buff_size_full;
wire [10 : 0] in_median_pos_data;
wire in_median_pos_push;
wire in_median_pos_full;
wire [7 : 0] in_second_median_value_data;
wire in_second_median_value_push;
wire in_second_median_value_full;
wire [7 : 0] out_px_data;
wire out_px_push;
wire out_px_full;
wire [7 : 0] out_pivot_data;
wire out_pivot_push;
wire out_pivot_full;
wire [10 : 0] out_buff_size_data;
wire out_buff_size_push;
wire out_buff_size_full;
wire [10 : 0] out_median_pos_data;
wire out_median_pos_push;
wire out_median_pos_full;
wire [7 : 0] out_second_median_value_data;
wire out_second_median_value_push;
wire out_second_median_value_full;
wire [31 : 0] slv_reg1;
wire [31 : 0] slv_reg2;
wire [31 : 0] slv_reg3;
wire [31 : 0] slv_reg4;
wire [31 : 0] slv_reg5;


// ----------------------------------------------------------------------------
// Body
// ----------------------------------------------------------------------------
// Configuration Registers
// ----------------------------------------------------------------------------
// Instantiation of Configuration Registers
config_registers # ( 
	.C_S_AXI_DATA_WIDTH(C_S00_AXI_DATA_WIDTH),
	.C_S_AXI_ADDR_WIDTH(C_S00_AXI_ADDR_WIDTH)
) i_config_registers (
	.S_AXI_ACLK(s00_axi_aclk),
	.S_AXI_ARESETN(s00_axi_aresetn),
	.S_AXI_AWADDR(s00_axi_awaddr),
	.S_AXI_AWPROT(s00_axi_awprot),
	.S_AXI_AWVALID(s00_axi_awvalid),
	.S_AXI_AWREADY(s00_axi_awready),
	.S_AXI_WDATA(s00_axi_wdata),
	.S_AXI_WSTRB(s00_axi_wstrb),
	.S_AXI_WVALID(s00_axi_wvalid),
	.S_AXI_WREADY(s00_axi_wready),
	.S_AXI_BRESP(s00_axi_bresp),
	.S_AXI_BVALID(s00_axi_bvalid),
	.S_AXI_BREADY(s00_axi_bready),
	.S_AXI_ARADDR(s00_axi_araddr),
	.S_AXI_ARPROT(s00_axi_arprot),
	.S_AXI_ARVALID(s00_axi_arvalid),
	.S_AXI_ARREADY(s00_axi_arready),
	.S_AXI_RDATA(s00_axi_rdata),
	.S_AXI_RRESP(s00_axi_rresp),
	.S_AXI_RVALID(s00_axi_rvalid),
	.S_AXI_RREADY(s00_axi_rready),
			.slv_reg1(slv_reg1),
		.slv_reg2(slv_reg2),
		.slv_reg3(slv_reg3),
		.slv_reg4(slv_reg4),
		.slv_reg5(slv_reg5),
    .slv_reg0(slv_reg0)
);
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
	
// Multi-Dataflow Reconfigurable Datapath
// ----------------------------------------------------------------------------
// to adapt profiling
multi_dataflow reconf_dpath (
	// Multi-Dataflow Input(s)
	.in_px_data(in_px_data),
	.in_px_wr(in_px_push),
	.in_px_full(in_px_full),
	.in_pivot_data(in_pivot_data),
	.in_pivot_wr(in_pivot_push),
	.in_pivot_full(in_pivot_full),
	.in_buff_size_data(in_buff_size_data),
	.in_buff_size_wr(in_buff_size_push),
	.in_buff_size_full(in_buff_size_full),
	.in_median_pos_data(in_median_pos_data),
	.in_median_pos_wr(in_median_pos_push),
	.in_median_pos_full(in_median_pos_full),
	.in_second_median_value_data(in_second_median_value_data),
	.in_second_median_value_wr(in_second_median_value_push),
	.in_second_median_value_full(in_second_median_value_full),
	// Multi-Dataflow Output(s)
	.out_px_data(out_px_data),
	.out_px_wr(out_px_push),
	.out_px_full(!out_px_full),
	.out_pivot_data(out_pivot_data),
	.out_pivot_wr(out_pivot_push),
	.out_pivot_full(!out_pivot_full),
	.out_buff_size_data(out_buff_size_data),
	.out_buff_size_wr(out_buff_size_push),
	.out_buff_size_full(!out_buff_size_full),
	.out_median_pos_data(out_median_pos_data),
	.out_median_pos_wr(out_median_pos_push),
	.out_median_pos_full(!out_median_pos_full),
	.out_second_median_value_data(out_second_median_value_data),
	.out_second_median_value_wr(out_second_median_value_push),
	.out_second_median_value_full(!out_second_median_value_full),
	// Monitoring
	// System Signal(s)
	.clock(s00_axi_aclk),
	.reset(s00_axi_aresetn)
);
assign s00_axis_tready = in_px_full;
assign in_px_data = s00_axis_tdata [7 : 0];
//assign = s00_axis_tstrb;
//assign = s00_axis_tlast;
assign in_px_push = s00_axis_tvalid;
//assign = s00_axis_data_count;
assign s01_axis_tready = in_pivot_full;
assign in_pivot_data = s01_axis_tdata [7 : 0];
//assign = s01_axis_tstrb;
//assign = s01_axis_tlast;
assign in_pivot_push = s01_axis_tvalid;
//assign = s01_axis_data_count;
assign s02_axis_tready = in_buff_size_full;
assign in_buff_size_data = s02_axis_tdata [10 : 0];
//assign = s02_axis_tstrb;
//assign = s02_axis_tlast;
assign in_buff_size_push = s02_axis_tvalid;
//assign = s02_axis_data_count;
assign s03_axis_tready = in_median_pos_full;
assign in_median_pos_data = s03_axis_tdata [10 : 0];
//assign = s03_axis_tstrb;
//assign = s03_axis_tlast;
assign in_median_pos_push = s03_axis_tvalid;
//assign = s03_axis_data_count;
assign s04_axis_tready = in_second_median_value_full;
assign in_second_median_value_data = s04_axis_tdata [7 : 0];
//assign = s04_axis_tstrb;
//assign = s04_axis_tlast;
assign in_second_median_value_push = s04_axis_tvalid;
//assign = s04_axis_data_count;
assign m00_axis_tvalid = out_px_push;
assign m00_axis_tdata = {{24{1'b0}},out_px_data};
assign m00_axis_tstrb = 4'b111;
//assign m00_axis_tlast = 1'b0;
assign out_px_full = !m00_axis_tready;
assign m01_axis_tvalid = out_pivot_push;
assign m01_axis_tdata = {{24{1'b0}},out_pivot_data};
assign m01_axis_tstrb = 4'b111;
//assign m01_axis_tlast = 1'b0;
assign out_pivot_full = !m01_axis_tready;
assign m02_axis_tvalid = out_buff_size_push;
assign m02_axis_tdata = {{21{1'b0}},out_buff_size_data};
assign m02_axis_tstrb = 4'b111;
//assign m02_axis_tlast = 1'b0;
assign out_buff_size_full = !m02_axis_tready;
assign m03_axis_tvalid = out_median_pos_push;
assign m03_axis_tdata = {{21{1'b0}},out_median_pos_data};
assign m03_axis_tstrb = 4'b111;
//assign m03_axis_tlast = 1'b0;
assign out_median_pos_full = !m03_axis_tready;
assign m04_axis_tvalid = out_second_median_value_push;
assign m04_axis_tdata = {{24{1'b0}},out_second_median_value_data};
assign m04_axis_tstrb = 4'b111;
//assign m04_axis_tlast = 1'b0;
assign out_second_median_value_full = !m04_axis_tready;
// ----------------------------------------------------------------------------	


// Output Counter(s)
// ----------------------------------------------------------------------------
counter #(			
	.SIZE(SIZE_COUNT_6) ) 
i_counter_out_px (
	.aclk(s00_axi_aclk),
	.aresetn(s00_axi_aresetn),
	.clr(slv_reg0[2]),
	.en(out_px_push),
	.max(slv_reg1[SIZE_COUNT_6-1:0]),
	.count(),
	.last(m00_axis_tlast)
);
// Output Counter(s)
// ----------------------------------------------------------------------------
counter #(			
	.SIZE(SIZE_COUNT_7) ) 
i_counter_out_pivot (
	.aclk(s00_axi_aclk),
	.aresetn(s00_axi_aresetn),
	.clr(slv_reg0[2]),
	.en(out_pivot_push),
	.max(slv_reg2[SIZE_COUNT_7-1:0]),
	.count(),
	.last(m01_axis_tlast)
);
// Output Counter(s)
// ----------------------------------------------------------------------------
counter #(			
	.SIZE(SIZE_COUNT_8) ) 
i_counter_out_buff_size (
	.aclk(s00_axi_aclk),
	.aresetn(s00_axi_aresetn),
	.clr(slv_reg0[2]),
	.en(out_buff_size_push),
	.max(slv_reg3[SIZE_COUNT_8-1:0]),
	.count(),
	.last(m02_axis_tlast)
);
// Output Counter(s)
// ----------------------------------------------------------------------------
counter #(			
	.SIZE(SIZE_COUNT_9) ) 
i_counter_out_median_pos (
	.aclk(s00_axi_aclk),
	.aresetn(s00_axi_aresetn),
	.clr(slv_reg0[2]),
	.en(out_median_pos_push),
	.max(slv_reg4[SIZE_COUNT_9-1:0]),
	.count(),
	.last(m03_axis_tlast)
);
// Output Counter(s)
// ----------------------------------------------------------------------------
counter #(			
	.SIZE(SIZE_COUNT_10) ) 
i_counter_out_second_median_value (
	.aclk(s00_axi_aclk),
	.aresetn(s00_axi_aresetn),
	.clr(slv_reg0[2]),
	.en(out_second_median_value_push),
	.max(slv_reg5[SIZE_COUNT_10-1:0]),
	.count(),
	.last(m04_axis_tlast)
);
// ----------------------------------------------------------------------------

endmodule
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
